



" ale
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''


" " clang-format
" let g:clang_format#style_options = {
"             \ "AccessModifierOffset" : -4,
"             \ "AllowShortIfStatementsOnASingleLine" : "true",
"             \ "AlwaysBreakTemplateDeclarations" : "true",
"             \ "Standard" : "C++11",
"             \ "BreakBeforeBraces" : "Stroustrup"}
" " map to <Leader>cf in C++ code
" autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
" autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" " if you install vim-operator-user
" " autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" " Toggle auto formatting:
" nmap <Leader>C :ClangFormatAutoToggle<CR>


" bookmark
let g:bookmark_save_per_working_dir = 1
let g:bookmark_auto_save = 1

" leaderF 
nnoremap <leader>f :LeaderfFile <cr>
let g:Lf_UseCache = 1
" should use `Leaderf gtags --update` first
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_PreviewInPopup = 1
let g:Lf_PreviewCode = 1
let g:Lf_GtagsSource = 2
let g:Lf_GtagsfilesCmd = {
            \ '.git': 'git ls-files --recurse-submodules | grep -v test',
            \ '.hg': 'hg files',
            \ 'default': 'rg --no-messages --files'
            \}
"let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.40
let g:Lf_PopupWidth = 0.80
let g:Lf_PopupHeight = 0.40
let g:Lf_PopupPreviewPosition = 'bottom'
let g:Lf_CacheDirectory = expand('~/.vim/cache')
"let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_WindowPosition = 'popup'
let g:Lf_DefaultMode = 'NameOnly'
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1
noremap <leader>frb :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR><CR>
noremap <leader>frg :<C-U><C-R>=printf("Leaderf! rg -g '!*test*' -g '!*mock_*' -w %s  ", expand("<cword>"))<CR><CR>
noremap <leader>frgm :<C-U><C-R>=printf("Leaderf! rg -g '!*test*' -g '!*mock_*' -g '*.{c,cpp,idl}' -w ::%s  src/* ", expand("<cword>"))<CR><CR>
noremap <leader>frgc :<C-U><C-R>=printf("Leaderf! rg -g '*.{c,cpp,idl}' -w %s  * ", expand("<cword>"))<CR><CR>
noremap <leader>frgC :<C-U><C-R>=printf("Leaderf! rg -g '*.{c,cpp,idl,h,hpp}' -e 'class %s' * ", expand("<cword>"))<CR><CR>
noremap <leader>frgh :<C-U><C-R>=printf("Leaderf! rg -g '*.{h,hpp,idl}' -w %s  * ", expand("<cword>"))<CR><CR>
noremap <leader>frga :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR><CR>
"noremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
"noremap go :<C-U>Leaderf! rg --recall<CR>
noremap <leader>fgr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump --match-path", expand("<cword>"))<CR><CR>
noremap <leader>fgd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump --match-path", expand("<cword>"))<CR><CR>
noremap <leader>fgo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fgn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fgp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>
noremap <leader>fga :<C-U><C-R>=printf("Leaderf gtags --all")<CR><CR>
noremap <leader>fmr :LeaderfMru<cr>
noremap <leader>ff :LeaderfFunction!<cr>
"noremap <leader>fb :LeaderfBuffer<cr>
noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
"noremap <leader>ft :LeaderfTag<cr>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
"noremap <leader>fm :LeaderfMarks<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

" ack
let g:ackprg = "ag --vimgrep"
let g:ackprg = 'ag --vimgrep --nogroup --nocolor --column --cpp '
let g:ackprg = 'ag --vimgrep --nogroup --nocolor --column -w '
let g:ackprg = "ag --vimgrep --nogroup --nocolor --column --cpp --ignore '*test*' --ignore '*third_party*' -w "

" search visually selected text literally
let g:Lf_PreviewResult = {
        \ 'File': 0,
        \ 'Buffer': 0,
        \ 'Mru': 0,
        \ 'Tag': 1,
        \ 'BufTag': 1,
        \ 'Function': 1,
        \ 'Line': 1,
        \ 'Colorscheme': 0,
        \ 'Rg': 1,
        \ 'Gtags': 1
        \}



" filetype detect
augroup filetypedetect
    au! BufRead,BufNewFile *.i		setfiletype c
augroup END

set wrap
set nowrapscan


" vim-auto-popmenu
" 设定需要生效的文件类型，如果是 "*" 的话，代表所有类型
let g:apc_enable_ft = {'text':1, 'markdown':1, 'php':1}

" 设定从字典文件以及当前打开的文件里收集补全单词，详情看 ':help cpt'
set cpt=.,k,w,b

" 不要自动选中第一个选项。
set completeopt=menu,menuone,noselect

" 禁止在下方显示一些啰嗦的提示
set shortmess+=c

set cmdheight=1          " 设置命令行的高度
